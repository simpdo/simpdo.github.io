[{"title":"C++实现Linux下鼠标键盘的模拟","path":"/2024/05/13/linux-input/","content":"C++实现Linux下模拟鼠标键盘，代码摘抄，仅作参数，不保证编译通过 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140//鼠标键定义enum class MouseKey : uint8_t&#123; Left = 0, //鼠标左键 Middle = 1, //鼠标中键 Right = 2, //鼠标右键 WheelUp = 3, //鼠标滚轮上 WheelDown = 4, //鼠标滚轮下 Invalid = 0xff,&#125;;enum class MouseKeyMask : uint8_t&#123; LeftMask = 0x1, MiddleMask = 0x2, RightMask = 0x4, WheelUpMask = 0x8, WheelDownMask = 0x10,&#125;;static const int kMouseKey2X11[] = &#123; Button1, Button2, Button3, Button4, Button5 &#125;;#include &lt;unistd.h&gt;#include &lt;bitset&gt;#include &lt;iostream&gt;#include &lt;X11/extensions/XTest.h&gt;#include &lt;X11/extensions/XKBstr.h&gt;#include &lt;X11/XKBlib.h&gt;#define CHECK_HANDLE(retVal) \\ if (nullptr == display) \\ &#123; \\ printf(&quot;X11 Display invalid&quot;); \\ return retVal; \\ &#125;extern Display* display;bool MoveMouse(int posX, int posY)&#123; CHECK_HANDLE(false); XTestFakeMotionEvent(display, -1, posX, posY, CurrentTime); XFlush(display); return true;&#125;//key需要转换，工程中是windows下传过来的bool KeyDown(uint32_t key)&#123; CHECK_HANDLE(false); KeyCode code = XKeysymToKeycode(display, key); XTestFakeKeyEvent(display, code, 1, CurrentTime); XSync(display, False); return true;&#125;bool KeyUp(uint32_t key)&#123; CHECK_HANDLE(false); KeyCode code = XKeysymToKeycode(display, key); XTestFakeKeyEvent(display, code, 0, CurrentTime); XSync(display, False); return true;&#125;bool MouseButtonEvent(MouseKey key, int pressed)&#123; CHECK_HANDLE(false); if (key &lt; MouseKey::Left || key &gt; MouseKey::WheelDown) &#123; printf(&quot;[InputEvent Mouse]invalid mouse key[%d]&quot;, key); return false; &#125; unsigned button = kMouseKey2X11[static_cast&lt;int&gt;(key)]; XTestFakeButtonEvent(display, button, pressed, CurrentTime); XFlush(display); return true;&#125;extern MouseEvent lastEvent;void ProcessMouseEvent(const MouseEvent&amp; event)&#123; printf(&quot;[Mouse] pos&#123;%d, %d&#125;, mask: %s&quot;, event.posX, event.posY, std::bitset&lt;8&gt;(int(event.mask)).to_string().c_str()); //鼠标的左中右键可以同时按下 uint8_t mouseMask = 0; for (MouseKey key : &#123;MouseKey::Left, MouseKey::Middle, MouseKey::Right&#125;) &#123; uint8_t keyMask = (0x1 &lt;&lt; static_cast&lt;uint8_t&gt;(key)); //事件变化的第一次发送事件给系统 if ((keyMask &amp; event.mask) == keyMask) //down &#123; if ((lastEvent.mask &amp; keyMask) == 0) &#123; PressMouseButton(key); printf(&quot;[InputEvent Mouse] key[%d] pressed down&quot;, key); &#125; lastEvent.mask |= keyMask; &#125; else &#123; if ((lastEvent.mask &amp; keyMask) == keyMask) &#123; ReleaseMouseButton(key); printf(&quot;[InputEvent Mouse] key[%d] pressed down&quot;, key); lastEvent.mask &amp;= (~keyMask); &#125; &#125; &#125; //滚轮上下滚动互斥, 滚轮不需要上次的， 滚轮处理需要同时调用按下和释放，否则不生效 uint8_t wheelUpMask = (0x1 &lt;&lt; static_cast&lt;uint8_t&gt;(MouseKey::WheelUp)); uint8_t wheelDownMask = (0x1 &lt;&lt; static_cast&lt;uint8_t&gt;(MouseKey::WheelDown)); if ((event.mask &amp; wheelUpMask) == wheelUpMask) &#123; PressMouseButton(MouseKey::WheelUp); ReleaseMouseButton(MouseKey::WheelUp); printf(&quot;[InputEvent Mouse] key[WheelUp] pressed down&quot;); &#125; else if ((event.mask &amp; wheelDownMask) == wheelDownMask) &#123; printf(&quot;[InputEvent Mouse] key[WheelDown] pressed down&quot;); PressMouseButton(MouseKey::WheelDown); ReleaseMouseButton(MouseKey::WheelDown); &#125; int16_t posX = event.posX + m_region.posX; int16_t posY = event.posY + m_region.posY; if ( posX != lastEvent.posX || posY != lastEvent.posY) &#123; MoveMouse(posX, posY); lastEvent.posX = posX; lastEvent.posY = posY; &#125;&#125;void ProcessKeyEvent(uint32_t key, uint8_t pressed)&#123; key = (key &amp; 0xFFFF); if (0 == pressed) KeyUp(key); else KeyDown(key);&#125;","tags":["c++","linux","X11"],"categories":["c++"]},{"title":"使用Hexo搭建博客","path":"/2024/05/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":["杂货"]}]